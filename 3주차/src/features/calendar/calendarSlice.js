import { createSlice } from '@reduxjs/toolkit';
import dispatch from ''
const initialState = {
  selectedDate: new Date().getDate(),
  selectedMonth: new Date().getMonth(),
  selectedYear: new Date().getFullYear(),
  select: true
}

export const dateSlice = createSlice({
  name: 'calendar',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setDate(state, action) {//payload = {date, feature: prev|next|null}
      const { date, feature } = action.payload;
      state.selectedDate = date;
      if (feature) {
        const obj = new Date(state.selectedYear, state.selectedMonth, state.selectedDate);
        switch (feature) {
          case 'prev':
            setMonth(state,)
        }
      }
      state.select = true;
    },
    setMonth(state, action) {//payload = {month, year}
      state.selectedMonth = action.payload.month;
      state.selectedYear = action.payload.year;
      state.select = false;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { setDate, setMonth } = dateSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectYear = (state) => state.calendar.selectedYear;
export const selectDate = (state) => state.calendar.selectedDate;
export const selectedMonth = (state) => state.calendar.selectedMonth;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default dateSlice.reducer;
